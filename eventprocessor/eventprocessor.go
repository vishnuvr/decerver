// The event processor handles events that are generated by the
// different components/modules.
package eventprocessor

import (
	"fmt"
	"encoding/json"
	"github.com/eris-ltd/thelonious/Godeps/_workspace/src/github.com/eris-ltd/modules/types"
	"github.com/eris-ltd/decerver/interfaces/decerver"
	"github.com/eris-ltd/decerver/interfaces/events"
	"github.com/eris-ltd/decerver/interfaces/logging"
	"github.com/eris-ltd/decerver/interfaces/modules"
	"log"
)

var logger *log.Logger = logging.NewLogger("Event Processor")

// Typedef for map of subscriptions
type SubMap map[string]*subscriptions

// a collection of subscribers.
type subscriptions struct {
	srs []events.Subscriber
}

// Add a new subscriber.
func (ss *subscriptions) add(sub events.Subscriber) {
	ss.srs = append(ss.srs, sub)
}

// Remove a subscriber.
func (ss *subscriptions) remove(subId string) bool {
	theIdx := -1
	for i, sub := range ss.srs {
		if sub.Id() == subId {
			theIdx = i
			break
		}
	}
	if theIdx >= 0 {
		// DEBUG
		logger.Println("Subscriber removed: " + subId)
		ss.srs = append(ss.srs[:theIdx], ss.srs[theIdx+1:]...)
		return true
	}
	return false
}

// Create a new 'subscriptions' object. The subscriber slice starts
// out with size 0 and is appended to and deleted from by the add and
// remove methods.
func newSubscriptions() *subscriptions {
	ss := &subscriptions{}
	ss.srs = make([]events.Subscriber, 0)
	return ss
}

type trafficData struct {
	// The total amount of events that are posted.
	EventsPosted uint64 `json:"events_posted"`
	// The number of events received sorted by source (module)
	EventsPostedBySource map[string]uint64 `json:"events_posted_by_source"`
	// Number of events passed on to a subscriber (meaning the
	// source, type and target matches)
	EventsSubReceivedBySource map[string]uint64 `json:"events_received_by_subs"`
	// The number of events from each module that was relayed but
	// not processed because of 0 subs.
	EventsNoSourceSubsBySource map[string]uint64 `json:"events_no_source_subs"`
	// This happens when there are subs to the source, but not
	// to the event type that's posted.
	EventsNoEvtSubs map[string]map[string]uint64 `json:"events_no_event_type_subs"`
}

func newTrafficData() *trafficData {
	td := &trafficData{}
	td.EventsPostedBySource = make(map[string]uint64)
	td.EventsSubReceivedBySource = make(map[string]uint64)
	td.EventsNoSourceSubsBySource = make(map[string]uint64)
	td.EventsNoEvtSubs = make(map[string]map[string]uint64)
	return td
}

func (td *trafficData) incPosted(src string) {
	td.EventsPosted++
	if _, ok := td.EventsPostedBySource[src]; !ok {
		td.EventsPostedBySource[src] = uint64(1)
	} else {
		td.EventsPostedBySource[src] = td.EventsPostedBySource[src] + uint64(1)
	}
}

func (td *trafficData) incNoSubBySource(src string) {
	if _, ok := td.EventsNoSourceSubsBySource[src]; !ok {
		td.EventsNoSourceSubsBySource[src] = uint64(1)
	} else {
		td.EventsNoSourceSubsBySource[src] = td.EventsNoSourceSubsBySource[src] + uint64(1)
	}
}

func (td *trafficData) incNoEvtSub(src, evt string) {
	if _, ok := td.EventsNoEvtSubs[src]; !ok {
		newMap := make(map[string]uint64)
		newMap[evt] = uint64(1)
		td.EventsNoEvtSubs[src] = newMap
	} else {
		td.EventsNoEvtSubs[src][evt] = td.EventsNoEvtSubs[src][evt] + uint64(1)
	}
}

func (td *trafficData) incrementReceived(src string) {
	if _, ok := td.EventsSubReceivedBySource[src]; !ok {
		td.EventsSubReceivedBySource[src] = uint64(1)
	} else {
		td.EventsSubReceivedBySource[src] = td.EventsSubReceivedBySource[src] + uint64(1)
	}
}

// The event processor handles subscribers and events.
type EventProcessor struct {
	// Store subscribers by source (which module they're subscribing to)
	subs map[string]SubMap
	// Store subs by id. This keeps a map of subID->sub for fast (constant speed) removal.
	byId map[string]events.Subscriber
	// A reference to the module registry. We need this in order to relay
	// subscription info to modules in case they want to filter their outgoing
	// events, or do other stuff.
	moduleManager modules.ModuleManager
	// Traffic data
	td *trafficData
	// Whether or not we're in debugging mode.
	debug bool
	// Main event channel
	mainEvts chan types.Event
	mainClose chan interface{}
	subChan chan events.Subscriber
	unsubChan chan string
	incomingChans map[string]chan types.Event
	closeChan chan interface{}
}

func NewEventProcessor(dc decerver.Decerver) events.EventProcessor {
	ep := &EventProcessor{}

	ep.subs = make(map[string]SubMap)
	ep.byId = make(map[string]events.Subscriber)
	ep.moduleManager = dc.ModuleManager()
	ep.debug = dc.Config().DebugMode
	if ep.debug {
		ep.td = newTrafficData()
	}
	ep.mainEvts = make(chan types.Event)
	ep.subChan = make(chan events.Subscriber)
	ep.unsubChan = make(chan string)
	ep.incomingChans = make(map[string]chan types.Event)
	ep.closeChan = make(chan interface{})

	go func(ep *EventProcessor){
		for {
			select{
				case evt := <- ep.mainEvts:
					fmt.Printf("Event: %v\n", evt)
					ep.post(evt)
				case sub := <- ep.subChan:
					ep.subscribe(sub)
				case id := <- ep.unsubChan:
					ep.unsubscribe(id)
				case _ = <- ep.closeChan:
					return
			}
		}

	}(ep)

	return ep
}

// TODO Not sure what the error is supposed to do yet
func (ep *EventProcessor) post(e types.Event) error {
	src := e.Source
	ee := e.Event
	if ep.debug {
		ep.td.incPosted(src)
		logger.Println("Receiving event '" + ee + "' from '" + src + "'.")
	}

	sourceSubs := ep.subs[src]
	if sourceSubs == nil || len(sourceSubs) == 0 {
		if ep.debug {
			logger.Println("No subscribers to events published by: " + src + ". Skipping.")
			ep.td.incNoEvtSub(src,ee)
		}
		return nil
	}

	eeSubs := sourceSubs[ee]
	if eeSubs == nil || len(eeSubs.srs) == 0 {
		if ep.debug {
			logger.Println("No subscribers to events of type '" + ee + "' published by '" + src + "'. Skipping.")
			ep.td.incNoEvtSub(src, ee)
		}
		return nil
	}

	for _, sub := range eeSubs.srs {
		if sub.Target() == e.Target {
			if ep.debug {
				logger.Println("Found subscriber")
				logger.Printf("Chan: %v\n", sub)
				ep.td.incrementReceived(src)
			}
			sub.Post(e)
		}
	}
	return nil
}

func (ep *EventProcessor) Subscribe(sub events.Subscriber) error {
	ep.subChan <- sub
	return nil
}

func (ep *EventProcessor) subscribe(sub events.Subscriber) error {
	src := sub.Source()
	if ep.debug {
		logger.Println("New subscription registering: " + src)
	}
	srcSubs, okSrc := ep.subs[src]
	if !okSrc {
		srcSubs = make(SubMap)
		ep.subs[src] = srcSubs
	}

	evt := sub.Event()
	evts, okEvt := srcSubs[evt]

	if !okEvt {
		evts = newSubscriptions()
		srcSubs[evt] = evts
	}

	evts.add(sub)
	ep.byId[sub.Id()] = sub

	// Call subscribe on module.
	eChan := ep.moduleManager.Modules()[src].Subscribe(sub.Id(), sub.Event(), sub.Target())
	ep.incomingChans[sub.Id()] = eChan
	go func(ch chan types.Event){
		for {
			evt, ok := <- ch
			if !ok {
				return
			} else {
				ep.mainEvts <- evt
			}
		}
	}(eChan)
	logger.Printf("New subscriber added to: %s (%s)\n", sub.Source(), sub.Event())
	return nil
}

// TODO not sure what the error is supposed to do yet
func (ep *EventProcessor) Unsubscribe(id string) error {
	ep.unsubChan <- id
	return nil
}

// TODO not sure what the error is supposed to do yet
func (ep *EventProcessor) unsubscribe(id string) error {
	sub, ok := ep.byId[id]
	if !ok {
		logger.Println("No subscriber with id: " + id)
		return nil
	}
	ep.moduleManager.Modules()[sub.Source()].UnSubscribe(sub.Id())
	// This is the crux. If module closes automatically, then it's wrong. No good way of checking.
	// close(ep.incomingChans[id])
	delete(ep.incomingChans,id)
	// Clean out the sub (both from subs and from the map that stores by id)
	// TODO this is temporary but otherwise store the channel in the subById? Make a struct?
	ep.subs[sub.Source()][sub.Event()].remove(id)
	delete(ep.byId, id)
	return nil
}

func (ep *EventProcessor) TrafficData() string {
	if ep.debug {
		bts, _ := json.MarshalIndent(ep.td, "", "\t")
		str := string(bts)
		// TODO remove
		logger.Println(str)
		return str
	} else {
		logger.Println("Event Traffic Data not available (debug mode must be enabled).")
		return "N/A"
	}
}
